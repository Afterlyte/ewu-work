
public class Graph {
	private LinkedList[] adj;
	private LinkedList dfs;
	private int time;
	private enum Color {
		WHITE,
		GRAY,
		BLACK
	};
	private Color[] colors;
	private int[][] timestamps;
	private int[] parents;
	
	
	Graph(LinkedList[] adj) {
		this.adj = adj;
		this.timestamps = new int[adj.length][2];
		this.parents = new int[adj.length];
		this.colors = new Color[adj.length];
	}
	
	public void DFS() {
		this.dfs = new LinkedList();
		for(int i = 0; i < this.adj.length; i++) {
			this.colors[i] = Color.WHITE;
			this.parents[i] = -1;
		}
		this.time = 0;
		for(int j = 0; j < this.adj.length; j++) {
			if(colors[j] == Color.WHITE) this.graph_DFS(adj[j]);
		}
	}

	private void graph_DFS(LinkedList s) {
		int x = (int) s.getFirst();
		dfs.addLast(s.getFirst());
		this.visited[x] = true;
		for(int i = 1; i < s.getSize(); i++) {
			if(this.visited[(int) s.getAtIndex(i)] == false) {
				graph_DFS(adj[(int) s.getAtIndex(i)]);
			}
		}
	}
	
	public LinkedList getDFS() {
		return this.dfs;
	}
}
