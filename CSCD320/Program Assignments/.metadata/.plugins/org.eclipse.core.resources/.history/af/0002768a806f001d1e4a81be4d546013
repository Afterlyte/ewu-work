
public class MinHeap {
	
	int[] minHeap;
	int heapSize;
	
	public MinHeap(int size) {
		this.minHeap = new int[size];
		this.heapSize = size;
	}
	
	static void buildMinHeap() {
		this.heapSize = minHeap.length - 1;
		for(int i = (int) Math.floor(list.length/2); i >= 1; i--) minHeapify(i);
	}
	
	static void minHeapify(int i) {
		if(i*2+1 <= heapSize) {
			if(list[i] < list[i*2] && list[i] < list[i*2+1]) {
				return;
			}
			else if(list[i*2] < list[i*2+1]) {
				int temp = list[i];
				list[i] = list[i*2];
				list[i*2] = temp;
				minHeapify(i*2);
			}
			else {
				int temp = list[i];
				list[i] = list[i*2+1];
				list[i*2+1] = temp;
				minHeapify(i*2+1);
			}
		}
		else if(i*2 <= heapSize) {
			if(list[i*2] < list[i]) {
				int temp = list[i];
				list[i] = list[i*2];
				list[i*2] = temp;
				minHeapify(i*2);
			}
		}
		else {
			return;
		}
		
	}
	
	static void heapSort() {
		buildMinHeap();
		for(int j = list.length - 1; j >= 2; j--) {
			int temp = list[1];
			list[1] = list[j];
			list[j] = temp;
			heapSize--;
			minHeapify(1);
		}
	}
}
