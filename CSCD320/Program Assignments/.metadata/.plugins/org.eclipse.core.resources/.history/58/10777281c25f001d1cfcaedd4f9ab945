// Author: Ian Kaiserman

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class FastMatrixMulti {
	
	static int[][] m;
	static int[][] s;
	
	private static int matrixChainOrder(int[] dims, int n) {
		for(int l = 2; l <= n; l++) {
			for(int i = 0; i <= n - l; i++) {
				int j = i + l - 1;
				m[i][j] = Integer.MAX_VALUE;
				for(int k = i; k <= j-1; k++) {
					int q = m[i][k] + m[k+1][j] + dims[i]*dims[k+1]*dims[j+1];
					if(q < m[i][j]) {
						m[i][j] = q;
						s[i][j] = k;
					}
				}
			}
		}
		return m[0][n-1];
	}
	
	private static void printOptimalParens(int i, int j) {
		if(i == j) System.out.printf("A[%s]", i);
		else {
			System.out.print("(");
			printOptimalParens(i, s[i][j]);
			printOptimalParens(s[i][j]+1, j);
			System.out.print(")");
		}
	}
	
	public static void main(String[] args) {
		File input = new File(args[0]);
		Scanner lines = null;
		Scanner fscan = null;
		int count = 0;
		try {
			fscan = new Scanner(input);
			lines = new Scanner(input);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		while(lines.hasNextInt()) {
			count++;
			lines.nextInt();
		}
		int[] dims = new int[count];
		for(int i = 0; i < dims.length; i++) {
			dims[i] = fscan.nextInt();
		}
		for(int x : dims) {
			System.out.print(x + " ");
		}
		System.out.println();
		System.out.println();
		m = new int[dims.length-1][dims.length-1];
		s = new int[dims.length-1][dims.length-1];
		int cost = matrixChainOrder(dims, dims.length - 1);
        for (int[] x : m)
        {
            for (int y : x)
            {
                System.out.print(y + " ");
            }
        System.out.println();
        }
        System.out.println();
        for (int[] x : s)
        {
            for (int y : x)
            {
                System.out.print(y + " ");
            }
        System.out.println();
        }
        System.out.println();
		printOptimalParens(0, dims.length - 2);
		System.out.println(cost);
	}


}
